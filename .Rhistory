map_df(read_as_text)
write.table(combined_data, file = "/Users/mevanskeene/Desktop/Project Coast/Project Coast WIN Upload 11-12-2024 UNFINISHED Sept data/TN/TN_STACKED.csv", sep = ",", na = "", row.names = FALSE, quote = FALSE)
View(combined_data)
### Project Notes ----
#To Make A stacked Project Coast R File Creation Code
## Time issues with the code
### WD and Packages ----
library(readxl) # For reading Excel files
library(dplyr) # For data manipulation
library(purrr) # For functional programming (map functions)
library(lubridate) # For date-time manipulation
### Read in Data ----
folder_path <- "/Users/mevanskeene/Desktop/Project Coast/Project Coast WIN Upload 11-12-2024 UNFINISHED Sept data/TN"
# Exclude temp files (~$) and select .xlsm files
file_list <- list.files(
path = folder_path,
pattern = "^[^~].*\\.xlsm$",
full.names = TRUE
)
# Function to read an Excel sheet with all columns as text
read_as_text <- function(file) {
col_names <- read_excel(file, sheet = "Nitrogen-Total", n_max = 1) %>% names()
# Read the entire sheet with all columns as text
df <- read_excel(file, sheet = "Nitrogen-Total", col_types = rep("text", length(col_names)))
# Convert the prep time column
df$Preparation_Time <- as.character(df$Preparation_Time)  # Ensure time is a character
# If time is stored as numeric (fraction of a day), convert it back to time format
if(any(grepl("^[0-9.]+$", df$Preparation_Time))) {  # Check if the column has numbers
df$Preparation_Time <- as.numeric(df$Preparation_Time) * 86400  # Convert to seconds
df$Preparation_Time <- format(as.POSIXct(df$Preparation_Time, origin = "1970-01-01", tz = "UTC"), "%I:%M:%S %p")
}
# Convert the analysis time column
df$Analysis_Time <- as.character(df$Analysis_Time)  # Ensure time is a character
# If time is stored as numeric (fraction of a day), convert it back to time format
if(any(grepl("^[0-9.]+$", df$Analysis_Time))) {  # Check if the column has numbers
df$Analysis_Time <- as.numeric(df$Analysis_Time) * 86400  # Convert to seconds
df$Analysis_Time <- format(as.POSIXct(df$Analysis_Time, origin = "1970-01-01", tz = "UTC"), "%I:%M:%S %p")
}
# Handle the Preparation_Date column
df$Analysis_Date <- as.character(df$Analysis_Date)  # Ensure time is a character
# If it's a text-based date, assume it is in 'MM/DD/YY' format and reformat it
# df$Analysis_Date <- as.Date(df$Analysis_Date, format = "%m/%d/%y")  # Parse date
# df$Analysis_Date <- format(df$Analysis_Date, "%m/%d/%Y")  # Format as MM/DD/YYYY
return(df)
}
# Read and combine all valid files
combined_data <- file_list %>%
map_df(read_as_text)
write.table(combined_data, file = "/Users/mevanskeene/Desktop/Project Coast/Project Coast WIN Upload 11-12-2024 UNFINISHED Sept data/TN/TN_STACKED.csv", sep = ",", na = "", row.names = FALSE, quote = FALSE)
View(combined_data)
### Project Notes ----
#To Make A stacked Project Coast R File Creation Code
## Time issues with the code
### WD and Packages ----
library(readxl) # For reading Excel files
library(dplyr) # For data manipulation
library(purrr) # For functional programming (map functions)
library(lubridate) # For date-time manipulation
### Read in Data ----
folder_path <- "/Users/mevanskeene/Desktop/Project Coast/Project Coast WIN Upload 11-12-2024 UNFINISHED Sept data/TN"
# Exclude temp files (~$) and select .xlsm files
file_list <- list.files(
path = folder_path,
pattern = "^[^~].*\\.xlsm$",
full.names = TRUE
)
# Function to read an Excel sheet with all columns as text
read_as_text <- function(file) {
col_names <- read_excel(file, sheet = "Nitrogen-Total", n_max = 1) %>% names()
# Read the entire sheet with all columns as text
df <- read_excel(file, sheet = "Nitrogen-Total", col_types = rep("text", length(col_names)))
# Convert the prep time column
df$Preparation_Time <- as.character(df$Preparation_Time)  # Ensure time is a character
# If time is stored as numeric (fraction of a day), convert it back to time format
if(any(grepl("^[0-9.]+$", df$Preparation_Time))) {  # Check if the column has numbers
df$Preparation_Time <- as.numeric(df$Preparation_Time) * 86400  # Convert to seconds
df$Preparation_Time <- format(as.POSIXct(df$Preparation_Time, origin = "1970-01-01", tz = "UTC"), "%I:%M:%S %p")
}
# Convert the analysis time column
df$Analysis_Time <- as.character(df$Analysis_Time)  # Ensure time is a character
# If time is stored as numeric (fraction of a day), convert it back to time format
if(any(grepl("^[0-9.]+$", df$Analysis_Time))) {  # Check if the column has numbers
df$Analysis_Time <- as.numeric(df$Analysis_Time) * 86400  # Convert to seconds
df$Analysis_Time <- format(as.POSIXct(df$Analysis_Time, origin = "1970-01-01", tz = "UTC"), "%I:%M:%S %p")
}
# Handle the Preparation_Date column (replace 'Preparation_Date' with your actual column name)
df$Preparation_Date <- as.character(df$Preparation_Date)  # Ensure it's a character
# Check if Preparation_Date is numeric (Excel serial date)
if (any(grepl("^[0-9.]+$", df$Preparation_Date))) {
# Convert numeric Excel serial date to Date
df$Preparation_Date <- as.numeric(df$Preparation_Date)
df$Preparation_Date <- as.Date(df$Preparation_Date, origin = "1900-01-01")  # Excel's date system
df$Preparation_Date <- format(df$Preparation_Date, "%m/%d/%Y")  # Format as MM/DD/YYYY
} else {
# If it's a text-based date, assume it is in 'MM/DD/YY' format and reformat it
df$Preparation_Date <- as.Date(df$Preparation_Date, format = "%m/%d/%y")  # Parse date
df$Preparation_Date <- format(df$Preparation_Date, "%m/%d/%Y")  # Format as MM/DD/YYYY
}
return(df)
}
# Read and combine all valid files
combined_data <- file_list %>%
map_df(read_as_text)
write.table(combined_data, file = "/Users/mevanskeene/Desktop/Project Coast/Project Coast WIN Upload 11-12-2024 UNFINISHED Sept data/TN/TN_STACKED.csv", sep = ",", na = "", row.names = FALSE, quote = FALSE)
View(combined_data)
### Project Notes ----
#To Make A stacked Project Coast R File Creation Code
## Time issues with the code
### WD and Packages ----
library(readxl) # For reading Excel files
library(dplyr) # For data manipulation
library(purrr) # For functional programming (map functions)
library(lubridate) # For date-time manipulation
### Read in Data ----
folder_path <- "/Users/mevanskeene/Desktop/Project Coast/Project Coast WIN Upload 11-12-2024 UNFINISHED Sept data/TN"
# Exclude temp files (~$) and select .xlsm files
file_list <- list.files(
path = folder_path,
pattern = "^[^~].*\\.xlsm$",
full.names = TRUE
)
# Function to read an Excel sheet with all columns as text
read_as_text <- function(file) {
col_names <- read_excel(file, sheet = "Nitrogen-Total", n_max = 1) %>% names()
# Read the entire sheet with all columns as text
df <- read_excel(file, sheet = "Nitrogen-Total", col_types = rep("text", length(col_names)))
# Convert the prep time column
df$Preparation_Time <- as.character(df$Preparation_Time)  # Ensure time is a character
# If time is stored as numeric (fraction of a day), convert it back to time format
if(any(grepl("^[0-9.]+$", df$Preparation_Time))) {  # Check if the column has numbers
df$Preparation_Time <- as.numeric(df$Preparation_Time) * 86400  # Convert to seconds
df$Preparation_Time <- format(as.POSIXct(df$Preparation_Time, origin = "1970-01-01", tz = "UTC"), "%I:%M:%S %p")
}
# Convert the analysis time column
df$Analysis_Time <- as.character(df$Analysis_Time)  # Ensure time is a character
# If time is stored as numeric (fraction of a day), convert it back to time format
if(any(grepl("^[0-9.]+$", df$Analysis_Time))) {  # Check if the column has numbers
df$Analysis_Time <- as.numeric(df$Analysis_Time) * 86400  # Convert to seconds
df$Analysis_Time <- format(as.POSIXct(df$Analysis_Time, origin = "1970-01-01", tz = "UTC"), "%I:%M:%S %p")
}
# Handle the Preparation_Date column (replace 'Preparation_Date' with your actual column name)
df$Preparation_Date <- as.character(df$Preparation_Date)  # Ensure it's a character
# Check if Preparation_Date is numeric (Excel serial date)
if (any(grepl("^[0-9.]+$", df$Preparation_Date))) {
# Convert numeric Excel serial date to Date, correcting the 1900 leap year bug
df$Preparation_Date <- as.numeric(df$Preparation_Date)
# Excel's serial date system is faulty due to the 1900 leap year bug, adjust by subtracting one day
df$Preparation_Date <- ifelse(df$Preparation_Date >= 60, df$Preparation_Date - 1, df$Preparation_Date)
df$Preparation_Date <- as.Date(df$Preparation_Date, origin = "1900-01-01")  # Convert to Date
df$Preparation_Date <- format(df$Preparation_Date, "%m/%d/%Y")  # Format as MM/DD/YYYY
} else {
# If it's a text-based date, assume it is in 'MM/DD/YY' format and reformat it
df$Preparation_Date <- as.Date(df$Preparation_Date, format = "%m/%d/%y")  # Parse date
df$Preparation_Date <- format(df$Preparation_Date, "%m/%d/%Y")  # Format as MM/DD/YYYY
}
return(df)
}
# Read and combine all valid files
combined_data <- file_list %>%
map_df(read_as_text)
write.table(combined_data, file = "/Users/mevanskeene/Desktop/Project Coast/Project Coast WIN Upload 11-12-2024 UNFINISHED Sept data/TN/TN_STACKED.csv", sep = ",", na = "", row.names = FALSE, quote = FALSE)
View(combined_data)
### Project Notes ----
#To Make A stacked Project Coast R File Creation Code
## Time issues with the code
### WD and Packages ----
library(readxl) # For reading Excel files
library(dplyr) # For data manipulation
library(purrr) # For functional programming (map functions)
library(lubridate) # For date-time manipulation
### Read in Data ----
folder_path <- "/Users/mevanskeene/Desktop/Project Coast/Project Coast WIN Upload 11-12-2024 UNFINISHED Sept data/TN"
# Exclude temp files (~$) and select .xlsm files
file_list <- list.files(
path = folder_path,
pattern = "^[^~].*\\.xlsm$",
full.names = TRUE
)
# Function to read an Excel sheet with all columns as text
read_as_text <- function(file) {
col_names <- read_excel(file, sheet = "Nitrogen-Total", n_max = 1) %>% names()
# Read the entire sheet with all columns as text
df <- read_excel(file, sheet = "Nitrogen-Total", col_types = rep("text", length(col_names)))
# Convert the prep time column
df$Preparation_Time <- as.character(df$Preparation_Time)  # Ensure time is a character
# If time is stored as numeric (fraction of a day), convert it back to time format
if(any(grepl("^[0-9.]+$", df$Preparation_Time))) {  # Check if the column has numbers
df$Preparation_Time <- as.numeric(df$Preparation_Time) * 86400  # Convert to seconds
df$Preparation_Time <- format(as.POSIXct(df$Preparation_Time, origin = "1970-01-01", tz = "UTC"), "%I:%M:%S %p")
}
# Convert the analysis time column
df$Analysis_Time <- as.character(df$Analysis_Time)  # Ensure time is a character
# If time is stored as numeric (fraction of a day), convert it back to time format
if(any(grepl("^[0-9.]+$", df$Analysis_Time))) {  # Check if the column has numbers
df$Analysis_Time <- as.numeric(df$Analysis_Time) * 86400  # Convert to seconds
df$Analysis_Time <- format(as.POSIXct(df$Analysis_Time, origin = "1970-01-01", tz = "UTC"), "%I:%M:%S %p")
}
# Handle the Preparation_Date column (replace 'Preparation_Date' with your actual column name)
df$Preparation_Date <- as.character(df$Preparation_Date)  # Ensure it's a character
# Check if Preparation_Date is numeric (Excel serial date)
if (any(grepl("^[0-9.]+$", df$Preparation_Date))) {
# Convert numeric Excel serial date to Date, correcting the 1900 leap year bug
df$Preparation_Date <- as.numeric(df$Preparation_Date)
# Excel serial number conversion: If it's greater than or equal to 60, we subtract 1 day due to the leap year bug.
df$Preparation_Date <- ifelse(df$Preparation_Date >= 60, df$Preparation_Date - 1, df$Preparation_Date)
# Convert serial date to Date, applying the correct origin (1900-01-01)
df$Preparation_Date <- as.Date(df$Preparation_Date, origin = "1900-01-01")  # Correct origin
df$Preparation_Date <- format(df$Preparation_Date, "%m/%d/%Y")  # Format as MM/DD/YYYY
} else {
# If it's a text-based date, assume it is in 'MM/DD/YY' format and reformat it
df$Preparation_Date <- as.Date(df$Preparation_Date, format = "%m/%d/%y")  # Parse date
df$Preparation_Date <- format(df$Preparation_Date, "%m/%d/%Y")  # Format as MM/DD/YYYY
}
return(df)
}
# Read and combine all valid files
combined_data <- file_list %>%
map_df(read_as_text)
write.table(combined_data, file = "/Users/mevanskeene/Desktop/Project Coast/Project Coast WIN Upload 11-12-2024 UNFINISHED Sept data/TN/TN_STACKED.csv", sep = ",", na = "", row.names = FALSE, quote = FALSE)
View(combined_data)
### Project Notes ----
#To Make A stacked Project Coast R File Creation Code
## Time issues with the code
### WD and Packages ----
library(readxl) # For reading Excel files
library(dplyr) # For data manipulation
library(purrr) # For functional programming (map functions)
library(lubridate) # For date-time manipulation
### Read in Data ----
folder_path <- "/Users/mevanskeene/Desktop/Project Coast/Project Coast WIN Upload 11-12-2024 UNFINISHED Sept data/TN"
# Exclude temp files (~$) and select .xlsm files
file_list <- list.files(
path = folder_path,
pattern = "^[^~].*\\.xlsm$",
full.names = TRUE
)
# Function to read an Excel sheet with all columns as text
read_as_text <- function(file) {
col_names <- read_excel(file, sheet = "Nitrogen-Total", n_max = 1) %>% names()
# Read the entire sheet with all columns as text
df <- read_excel(file, sheet = "Nitrogen-Total", col_types = rep("text", length(col_names)))
# Convert the prep time column
df$Preparation_Time <- as.character(df$Preparation_Time)  # Ensure time is a character
# If time is stored as numeric (fraction of a day), convert it back to time format
if(any(grepl("^[0-9.]+$", df$Preparation_Time))) {  # Check if the column has numbers
df$Preparation_Time <- as.numeric(df$Preparation_Time) * 86400  # Convert to seconds
df$Preparation_Time <- format(as.POSIXct(df$Preparation_Time, origin = "1970-01-01", tz = "UTC"), "%I:%M:%S %p")
}
# Convert the analysis time column
df$Analysis_Time <- as.character(df$Analysis_Time)  # Ensure time is a character
# If time is stored as numeric (fraction of a day), convert it back to time format
if(any(grepl("^[0-9.]+$", df$Analysis_Time))) {  # Check if the column has numbers
df$Analysis_Time <- as.numeric(df$Analysis_Time) * 86400  # Convert to seconds
df$Analysis_Time <- format(as.POSIXct(df$Analysis_Time, origin = "1970-01-01", tz = "UTC"), "%I:%M:%S %p")
}
# Handle the Preparation_Date column (replace 'Preparation_Date' with your actual column name)
df$Preparation_Date <- as.character(df$Preparation_Date)  # Ensure it's a character
# Check if Preparation_Date is numeric (Excel serial date)
if (any(grepl("^[0-9.]+$", df$Preparation_Date))) {
# Convert numeric Excel serial date to Date, correcting the 1900 leap year bug
df$Preparation_Date <- as.numeric(df$Preparation_Date)
# Excel serial number conversion: If it's greater than or equal to 60, we subtract 1 day due to the leap year bug.
df$Preparation_Date <- ifelse(df$Preparation_Date >= 60, df$Preparation_Date - 1, df$Preparation_Date)
# Convert serial date to Date, applying the correct origin (1900-01-01)
df$Preparation_Date <- as.Date(df$Preparation_Date, origin = "1900-01-01")  # Correct origin
df$Preparation_Date <- format(df$Preparation_Date, "%m/%d/%Y")  # Format as MM/DD/YYYY
} else {
# If it's a text-based date, assume it is in 'MM/DD/YY' format and reformat it
df$Preparation_Date <- as.Date(df$Preparation_Date, format = "%m/%d/%y")  # Parse date
df$Preparation_Date <- format(df$Preparation_Date, "%m/%d/%Y")  # Format as MM/DD/YYYY
}
return(df)
}
# Read and combine all valid files
combined_data <- file_list %>%
map_df(read_as_text)
write.table(combined_data, file = "/Users/mevanskeene/Desktop/Project Coast/Project Coast WIN Upload 11-12-2024 UNFINISHED Sept data/TN/TN_STACKED.csv", sep = ",", na = "", row.names = FALSE, quote = FALSE)
View(combined_data)
### Project Notes ----
#To Make A stacked Project Coast R File Creation Code
## Time issues with the code
### WD and Packages ----
library(readxl) # For reading Excel files
library(dplyr) # For data manipulation
library(purrr) # For functional programming (map functions)
library(lubridate) # For date-time manipulation
### Read in Data ----
folder_path <- "/Users/mevanskeene/Desktop/Project Coast/Project Coast WIN Upload 11-12-2024 UNFINISHED Sept data/TN"
# Exclude temp files (~$) and select .xlsm files
file_list <- list.files(
path = folder_path,
pattern = "^[^~].*\\.xlsm$",
full.names = TRUE
)
# Function to read an Excel sheet with all columns as text
read_as_text <- function(file) {
col_names <- read_excel(file, sheet = "Nitrogen-Total", n_max = 1) %>% names()
# Read the entire sheet with all columns as text
df <- read_excel(file, sheet = "Nitrogen-Total", col_types = rep("text", length(col_names)))
# Convert the prep time column
df$Preparation_Time <- as.character(df$Preparation_Time)  # Ensure time is a character
# If time is stored as numeric (fraction of a day), convert it back to time format
if(any(grepl("^[0-9.]+$", df$Preparation_Time))) {  # Check if the column has numbers
df$Preparation_Time <- as.numeric(df$Preparation_Time) * 86400  # Convert to seconds
df$Preparation_Time <- format(as.POSIXct(df$Preparation_Time, origin = "1970-01-01", tz = "UTC"), "%I:%M:%S %p")
}
# Convert the analysis time column
df$Analysis_Time <- as.character(df$Analysis_Time)  # Ensure time is a character
# If time is stored as numeric (fraction of a day), convert it back to time format
if(any(grepl("^[0-9.]+$", df$Analysis_Time))) {  # Check if the column has numbers
df$Analysis_Time <- as.numeric(df$Analysis_Time) * 86400  # Convert to seconds
df$Analysis_Time <- format(as.POSIXct(df$Analysis_Time, origin = "1970-01-01", tz = "UTC"), "%I:%M:%S %p")
}
# Handle the Preparation_Date column (replace 'Preparation_Date' with your actual column name)
# df$Preparation_Date <- as.character(df$Preparation_Date)  # Ensure it's a character
# Check if Preparation_Date is numeric (Excel serial date)
if (any(grepl("^[0-9.]+$", df$Preparation_Date))) {
# Convert numeric Excel serial date to Date, correcting the 1900 leap year bug
df$Preparation_Date <- as.numeric(df$Preparation_Date)
# Excel serial number conversion: If it's greater than or equal to 60, we subtract 1 day due to the leap year bug.
df$Preparation_Date <- ifelse(df$Preparation_Date >= 60, df$Preparation_Date - 1, df$Preparation_Date)
# Convert serial date to Date, applying the correct origin (1900-01-01)
df$Preparation_Date <- as.Date(df$Preparation_Date, origin = "1900-01-01")  # Correct origin
df$Preparation_Date <- format(df$Preparation_Date, "%m/%d/%Y")  # Format as MM/DD/YYYY
} else {
# If it's a text-based date, assume it is in 'MM/DD/YY' format and reformat it
df$Preparation_Date <- as.Date(df$Preparation_Date, format = "%m/%d/%y")  # Parse date
df$Preparation_Date <- format(df$Preparation_Date, "%m/%d/%Y")  # Format as MM/DD/YYYY
}
return(df)
}
# Read and combine all valid files
combined_data <- file_list %>%
map_df(read_as_text)
write.table(combined_data, file = "/Users/mevanskeene/Desktop/Project Coast/Project Coast WIN Upload 11-12-2024 UNFINISHED Sept data/TN/TN_STACKED.csv", sep = ",", na = "", row.names = FALSE, quote = FALSE)
View(combined_data)
View(combined_data)
### Project Notes ----
#To Make A stacked Project Coast R File Creation Code
## Time issues with the code
### WD and Packages ----
library(readxl) # For reading Excel files
library(dplyr) # For data manipulation
library(purrr) # For functional programming (map functions)
library(lubridate) # For date-time manipulation
### Read in Data ----
folder_path <- "/Users/mevanskeene/Desktop/Project Coast/Project Coast WIN Upload 11-12-2024 UNFINISHED Sept data/TN"
# Exclude temp files (~$) and select .xlsm files
file_list <- list.files(
path = folder_path,
pattern = "^[^~].*\\.xlsm$",
full.names = TRUE
)
# Function to read an Excel sheet with all columns as text
read_as_text <- function(file) {
col_names <- read_excel(file, sheet = "Nitrogen-Total", n_max = 1) %>% names()
# Read the entire sheet with all columns as text
df <- read_excel(file, sheet = "Nitrogen-Total", col_types = rep("text", length(col_names)))
# Convert the prep time column
df$Preparation_Time <- as.character(df$Preparation_Time)  # Ensure time is a character
# If time is stored as numeric (fraction of a day), convert it back to time format
if(any(grepl("^[0-9.]+$", df$Preparation_Time))) {  # Check if the column has numbers
df$Preparation_Time <- as.numeric(df$Preparation_Time) * 86400  # Convert to seconds
df$Preparation_Time <- format(as.POSIXct(df$Preparation_Time, origin = "1970-01-01", tz = "UTC"), "%I:%M:%S %p")
}
# Convert the analysis time column
df$Analysis_Time <- as.character(df$Analysis_Time)  # Ensure time is a character
# If time is stored as numeric (fraction of a day), convert it back to time format
if(any(grepl("^[0-9.]+$", df$Analysis_Time))) {  # Check if the column has numbers
df$Analysis_Time <- as.numeric(df$Analysis_Time) * 86400  # Convert to seconds
df$Analysis_Time <- format(as.POSIXct(df$Analysis_Time, origin = "1970-01-01", tz = "UTC"), "%I:%M:%S %p")
}
# Handle the Preparation_Date column (replace 'Preparation_Date' with your actual column name)
# df$Preparation_Date <- as.character(df$Preparation_Date)  # Ensure it's a character
# Check if Preparation_Date is numeric (Excel serial date)
if (any(grepl("^[0-9.]+$", df$Preparation_Date))) {
# Convert numeric Excel serial date to Date, correcting the 1900 leap year bug
df$Preparation_Date <- as.numeric(df$Preparation_Date)
# Excel serial number conversion: If it's greater than or equal to 60, we subtract 1 day due to the leap year bug.
df$Preparation_Date <- ifelse(df$Preparation_Date >= 60, df$Preparation_Date - 1, df$Preparation_Date)
# Convert serial date to Date, applying the correct origin (1900-01-01)
df$Preparation_Date <- as.Date(df$Preparation_Date, origin = "1900-01-01")  # Correct origin
df$Preparation_Date <- format(df$Preparation_Date, "%m/%d/%Y")  # Format as MM/DD/YYYY
# } else {
#   # If it's a text-based date, assume it is in 'MM/DD/YY' format and reformat it
#   df$Preparation_Date <- as.Date(df$Preparation_Date, format = "%m/%d/%y")  # Parse date
#   df$Preparation_Date <- format(df$Preparation_Date, "%m/%d/%Y")  # Format as MM/DD/YYYY
# }
return(df)
}
# Read and combine all valid files
combined_data <- file_list %>%
map_df(read_as_text)
write.table(combined_data, file = "/Users/mevanskeene/Desktop/Project Coast/Project Coast WIN Upload 11-12-2024 UNFINISHED Sept data/TN/TN_STACKED.csv", sep = ",", na = "", row.names = FALSE, quote = FALSE)
View(combined_data)
View(combined_data)
return(df)
### Project Notes ----
#To Make A stacked Project Coast R File Creation Code
## Time issues with the code
### WD and Packages ----
library(readxl) # For reading Excel files
library(dplyr) # For data manipulation
library(purrr) # For functional programming (map functions)
library(lubridate) # For date-time manipulation
### Read in Data ----
folder_path <- "/Users/mevanskeene/Desktop/Project Coast/Project Coast WIN Upload 11-12-2024 UNFINISHED Sept data/TN"
# Exclude temp files (~$) and select .xlsm files
file_list <- list.files(
path = folder_path,
pattern = "^[^~].*\\.xlsm$",
full.names = TRUE
)
# Function to read an Excel sheet with all columns as text
read_as_text <- function(file) {
col_names <- read_excel(file, sheet = "Nitrogen-Total", n_max = 1) %>% names()
# Read the entire sheet with all columns as text
df <- read_excel(file, sheet = "Nitrogen-Total", col_types = rep("text", length(col_names)))
# Convert the prep time column
df$Preparation_Time <- as.character(df$Preparation_Time)  # Ensure time is a character
# If time is stored as numeric (fraction of a day), convert it back to time format
if(any(grepl("^[0-9.]+$", df$Preparation_Time))) {  # Check if the column has numbers
df$Preparation_Time <- as.numeric(df$Preparation_Time) * 86400  # Convert to seconds
df$Preparation_Time <- format(as.POSIXct(df$Preparation_Time, origin = "1970-01-01", tz = "UTC"), "%I:%M:%S %p")
}
# Convert the analysis time column
df$Analysis_Time <- as.character(df$Analysis_Time)  # Ensure time is a character
# If time is stored as numeric (fraction of a day), convert it back to time format
if(any(grepl("^[0-9.]+$", df$Analysis_Time))) {  # Check if the column has numbers
df$Analysis_Time <- as.numeric(df$Analysis_Time) * 86400  # Convert to seconds
df$Analysis_Time <- format(as.POSIXct(df$Analysis_Time, origin = "1970-01-01", tz = "UTC"), "%I:%M:%S %p")
}
# Handle the Preparation_Date column (replace 'Preparation_Date' with your actual column name)
# df$Preparation_Date <- as.character(df$Preparation_Date)  # Ensure it's a character
# Check if Preparation_Date is numeric (Excel serial date)
if (any(grepl("^[0-9.]+$", df$Preparation_Date))) {
# Convert numeric Excel serial date to Date, correcting the 1900 leap year bug
df$Preparation_Date <- as.numeric(df$Preparation_Date)
# Excel serial number conversion: If it's greater than or equal to 60, we subtract 1 day due to the leap year bug.
df$Preparation_Date <- ifelse(df$Preparation_Date >= 60, df$Preparation_Date - 1, df$Preparation_Date)
# Convert serial date to Date, applying the correct origin (1900-01-01)
df$Preparation_Date <- as.Date(df$Preparation_Date, origin = "1900-01-01")  # Correct origin
df$Preparation_Date <- format(df$Preparation_Date, "%m/%d/%Y")  # Format as MM/DD/YYYY
# } else {
#   # If it's a text-based date, assume it is in 'MM/DD/YY' format and reformat it
#   df$Preparation_Date <- as.Date(df$Preparation_Date, format = "%m/%d/%y")  # Parse date
#   df$Preparation_Date <- format(df$Preparation_Date, "%m/%d/%Y")  # Format as MM/DD/YYYY
# }
return(df)
}
# Read and combine all valid files
combined_data <- file_list %>%
map_df(read_as_text)
write.table(combined_data, file = "/Users/mevanskeene/Desktop/Project Coast/Project Coast WIN Upload 11-12-2024 UNFINISHED Sept data/TN/TN_STACKED.csv", sep = ",", na = "", row.names = FALSE, quote = FALSE)
### Project Notes ----
#To Make A stacked Project Coast R File Creation Code
## Time issues with the code
### WD and Packages ----
library(readxl) # For reading Excel files
library(dplyr) # For data manipulation
library(purrr) # For functional programming (map functions)
library(lubridate) # For date-time manipulation
### Read in Data ----
folder_path <- "/Users/mevanskeene/Desktop/Project Coast/Project Coast WIN Upload 11-12-2024 UNFINISHED Sept data/TN"
# Exclude temp files (~$) and select .xlsm files
file_list <- list.files(
path = folder_path,
pattern = "^[^~].*\\.xlsm$",
full.names = TRUE
)
# Function to read an Excel sheet with all columns as text
read_as_text <- function(file) {
col_names <- read_excel(file, sheet = "Nitrogen-Total", n_max = 1) %>% names()
# Read the entire sheet with all columns as text
df <- read_excel(file, sheet = "Nitrogen-Total", col_types = rep("text", length(col_names)))
# Convert the prep time column
df$Preparation_Time <- as.character(df$Preparation_Time)  # Ensure time is a character
# If time is stored as numeric (fraction of a day), convert it back to time format
if(any(grepl("^[0-9.]+$", df$Preparation_Time))) {  # Check if the column has numbers
df$Preparation_Time <- as.numeric(df$Preparation_Time) * 86400  # Convert to seconds
df$Preparation_Time <- format(as.POSIXct(df$Preparation_Time, origin = "1970-01-01", tz = "UTC"), "%I:%M:%S %p")
}
# Convert the analysis time column
df$Analysis_Time <- as.character(df$Analysis_Time)  # Ensure time is a character
# If time is stored as numeric (fraction of a day), convert it back to time format
if(any(grepl("^[0-9.]+$", df$Analysis_Time))) {  # Check if the column has numbers
df$Analysis_Time <- as.numeric(df$Analysis_Time) * 86400  # Convert to seconds
df$Analysis_Time <- format(as.POSIXct(df$Analysis_Time, origin = "1970-01-01", tz = "UTC"), "%I:%M:%S %p")
}
# Handle the Preparation_Date column (replace 'Preparation_Date' with your actual column name)
# df$Preparation_Date <- as.character(df$Preparation_Date)  # Ensure it's a character
# Check if Preparation_Date is numeric (Excel serial date)
if (any(grepl("^[0-9.]+$", df$Preparation_Date))) {
# Convert numeric Excel serial date to Date, correcting the 1900 leap year bug
df$Preparation_Date <- as.numeric(df$Preparation_Date)
# Excel serial number conversion: If it's greater than or equal to 60, we subtract 1 day due to the leap year bug.
df$Preparation_Date <- ifelse(df$Preparation_Date >= 60, df$Preparation_Date - 1, df$Preparation_Date)
# Convert serial date to Date, applying the correct origin (1900-01-01)
df$Preparation_Date <- as.Date(df$Preparation_Date, origin = "1900-01-01")  # Correct origin
df$Preparation_Date <- format(df$Preparation_Date, "%m/%d/%Y")  # Format as MM/DD/YYYY
# } else {
#   # If it's a text-based date, assume it is in 'MM/DD/YY' format and reformat it
#   df$Preparation_Date <- as.Date(df$Preparation_Date, format = "%m/%d/%y")  # Parse date
#   df$Preparation_Date <- format(df$Preparation_Date, "%m/%d/%Y")  # Format as MM/DD/YYYY
}
return(df)
}
# Read and combine all valid files
combined_data <- file_list %>%
map_df(read_as_text)
write.table(combined_data, file = "/Users/mevanskeene/Desktop/Project Coast/Project Coast WIN Upload 11-12-2024 UNFINISHED Sept data/TN/TN_STACKED.csv", sep = ",", na = "", row.names = FALSE, quote = FALSE)
View(combined_data)
