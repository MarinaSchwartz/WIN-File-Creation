Preparation_Time = col_character(),
Analysis_Time = col_character(),
Activity_Start_Time = col_character(),
))
### Functions ----
## FOR ALL PARAMETERS ##
## Define lakes and counties for CBA
cba_lake_names <- c("Allen", "Alligator", "Bass Lake", "Big Red Fish", "Camp Creek", "Campbell",
"Deer", "Draper", "Eastern", "Eastern North", "Fuller", "Grayton",
"Little Red Fish", "Morris", "Mullet Creek-1", "Mullet Creek-2",
"Mullet Creek-3", "Oyster", "Powell", "Roberts", "Stallworth",
"Swift Creek-1", "Swift Creek-2", "Swift Creek-3", "Swift Creek-4",
"Tresca", "Western", "Western Northeast")
cba_county_names <- c("Walton", "Okaloosa", "Washington", "Holmes")
# Function to update Sampling_Agency_Name
change_sampling_names <- function(Lake, County) {
if (str_detect(Lake, regex("CBA", ignore_case = TRUE))) {
return("CHOCTAWHATCHEE BASIN ALLIANCE")
} else if (Lake %in% cba_lake_names & County %in% cba_county_names) {
return("CHOCTAWHATCHEE BASIN ALLIANCE")
} else if (County == "Bay") {
return("ST. ANDREW BAY RESOURCE MANAGEMENT ASSOCIATION INC.")
} else {
return("Florida Lakewatch")
}
}
# Apply function to update Sampling_Agency_Name in the dataset
# df <- df %>%
#   mutate(Sampling_Agency_Name = mapply(change_sampling_names, Lake, County))
# For changing the Project ID
change_project_id<- function(Project_ID, Sampling_Agency_Name) {
Sampling_Agency_Name <- ifelse(grepl("CHOCTAWHATCHEE BASIN ALLIANCE", Sampling_Agency_Name, ignore.case = FALSE),
"BAYRALLY",
"21FLKWAT")
return(Sampling_Agency_Name)
}
## FOR SECCHI ONLY ##
#For blank org result value, org result value should = "Not Reported".
not_reported_secchi <- function(Org_Result_Value){
ifelse(is.na(Org_Result_Value), "Not Reported", Org_Result_Value)
}
#change Total_Depth to = Org_Result_Value If Value_Qualifier = S
change_total_depth <- function(Total_Depth, Value_Qualifier, Org_Result_Value){
ifelse(Value_Qualifier == "S", Org_Result_Value, Total_Depth)
}
### RECYCLE NON_MATCHES ----
#Join each non match file with Secchi for start time and concat it with its parameter file for this round -
#make sure to remove these lines from the non match and resave non match file as new
### SECCHI ----
#change format of dates
v2<- c(Secchi$Activity_Start_Date)
x2 <- lubridate::parse_date_time(v2,'"%m%d%y"')
format(x2, format = '%m/%d/%Y')
Secchi_d <- Secchi%>%
mutate('Activity_Start_Date'=format(x2, format = '%m/%d/%Y')) %>%
mutate(Org_Analyte_Name = "Depth, Secchi Disk Depth")%>%
mutate('Org_Result_Value' = not_reported_secchi(Org_Result_Value))%>%
mutate(Station = as.character(Station)) %>%
mutate(Lake_County_Sta = paste(Lake, County, Station)) %>%
mutate(Org_Result_Value = not_reported_secchi(Org_Result_Value)) %>%
mutate(Total_Depth = change_total_depth(Total_Depth,Value_Qualifier, Org_Result_Value)) %>%
mutate(Sampling_Agency_Name = mapply(change_sampling_names, Lake, County)) %>%
mutate(Project_ID = change_project_id(Project_ID, Sampling_Agency_Name))
#JOIN WITH BASE FILE FOR MONITORING LOCATION ID
Mon_ID = Mon_ID %>%
mutate(Station = as.character(Station)) %>%
mutate(Lake_County_Sta = paste(Lake, County, Station))
Secchi_t  <- Secchi_d %>%
inner_join(Mon_ID, by = c("Lake_County_Sta")) %>%
select(-c("Lake.y", "County.y", "Station.y")) %>%
rename("Lake" = "Lake.x", "County" = "County.x", "Station" = "Station.x")
#ADD COLUMNS
Secchi_WIN <- Secchi_t
Secchi_WIN$Project_ID = paste0(Secchi_t$"Project_ID")
Secchi_WIN$Sampling_Agency_Name = paste0(Secchi_t$"Sampling_Agency_Name")
Secchi_WIN$Matrix <- "AQUEOUS-Surface Water"
Secchi_WIN$Monitoring_Location_ID = paste0(Secchi_t$"Lake_County_Sta")
Secchi_WIN$Activity_ID = paste0(Secchi_WIN$Monitoring_Location_ID,"-",Secchi_t$Activity_Start_Date,"F")
Secchi_WIN$Activity_Date_Time = paste0(Secchi_t$Activity_Start_Date," ",Secchi_t$Activity_Start_Time)
Secchi_WIN$Preparation_Date_Time = paste0(" ")
Secchi_WIN$Analysis_Date_Time = paste0(" ")
Secchi_WIN$Lab_ID = paste("21FLKWAT")
Secchi_WIN$Lab_Accreditation_Authority = paste("None")
Secchi_WIN$Lab_Sample_ID = paste0(Secchi_WIN$Activity_ID)
#Reorder columns
Secchi_Print <- Secchi_WIN[,c("Project_ID","Sampling_Agency_Name","Matrix",
"Monitoring_Location_ID","Activity_ID","ADAPT_Analyte_ID","Org_Analyte_Name",
"Activity_Type","Sample_Collection_Type","Sample_Collection_Equipment",
"Activity_Depth","Activity_Depth_Unit","Total_Depth",
"Total_Depth_Unit","Analysis_Method","Sample_Fraction",
"Preparation_Date_Time","Preparation_Time_Zone","Analysis_Date_Time",
"Analysis_Time_Zone","Activity_Date_Time","Activity_Time_Zone",
"Org_Result_Value","Org_Result_Unit","Org_MDL",
"Org_PQL","Org_Detection_Unit","Value_Qualifier",
"Result_Comments","Result_Value_Type_Name","Dilution",
"Lab_ID","Lab_Accreditation_Authority","Lab_Sample_ID")]
#Subset Secchi for join with other parameters
Secchi_Join <- Secchi_t[,c("County", "Lake", "Activity_Start_Date", "Activity_Start_Time", "Station", "Activity_Time_Zone", "Monitoring_Location_ID")]
### Change date to avoid overwriting older files
CBA_Secchi <- Secchi_Print %>% filter(Sampling_Agency_Name == "CHOCTAWHATCHEE BASIN ALLIANCE")
write.table(CBA_Secchi, file = "Output/CBA_Secchi_Dec2024.txt", sep = "|", na = "", row.names = FALSE, quote = FALSE)
LW_Secchi <- Secchi_Print %>% filter(Sampling_Agency_Name == "Florida Lakewatch")
write.table(LW_Secchi, file = "Output/LW_Secchi_Dec2024.txt", sep = "|", na = "", row.names = FALSE, quote = FALSE)
### TP ----
#bind rows from TP and TP_NonMatch
TP <- rbind(TP, TP_NonMatch)
#change format of dates
v5<- c(TP$Activity_Start_Date)
x5 <- lubridate::parse_date_time(v5,'"%m%d%y"')
format(x5, format = '%m/%d/%Y')
v105<- c(TP$Preparation_Date)
x105 <- lubridate::parse_date_time(v105,'"%m%d%y"')
format(x105, format = '%m/%d/%Y')
v106<- c(TP$Analysis_Date)
x106 <- lubridate::parse_date_time(v106,'"%m%d%y"')
format(x106, format = '%m/%d/%Y')
TP_t = TP%>%
mutate('Activity_Start_Date'=format(x5, format = '%m/%d/%Y')) %>%
mutate('Preparation_Date'=format(x105, format = '%m/%d/%Y')) %>%
mutate('Analysis_Date'=format(x106, format = '%m/%d/%Y')) %>%
mutate('WIN_Value_Qualifier' = ifelse(WIN_Value_Qualifier %in% c("T", "TI"), "U",
ifelse(WIN_Value_Qualifier == "QTI", "QU", WIN_Value_Qualifier)))%>%
mutate('Result_Value(ug/L)' = ifelse('Result_Value(ug/L)' <6, 6, 'Result_Value(ug/L)')) %>%
mutate(Sampling_Agency_Name = mapply(change_sampling_names, Lake, County))%>%
mutate(Project_ID = change_project_id(Project_ID, Sampling_Agency_Name))
View(Secchi_Join)
View(Secchi_Join)
View(TP_Time)
# Project Notes ----
#For sampling agency names:
#which lakes are actually St. Andrews, or is it just all Bay county like XT did it?
#Sampling Agency Names : ST. ANDREW BAY RESOURCE MANAGEMENT ASSOCIATION INC. or Florida Lakewatch (Project ID: 21FLKWAT) or
#CHOCTAWHATCHEE BASIN ALLIANCE (Project ID: BAYRALLY)
#Non-matches and recycling:
#Subset these non matches and add them to a non match folder like always? Yes, for each upload, keep a running file for all non matches
#and code in a concat with non match before joining wiht secchi?
#Also add by joining this secchi with old non matches for each run through this code
#Since chls SHOULD be running about the same time as other parameters, just ignore non-matches? juice worth the squeeze??
#Before running this code,
#Copy the new version of files to Data folder using Data Import names
#Adjust column names to work with code
#rows without activity times from secchi and rows without filtering times from CHL files (both cor and un) will not go into WIN...
#What to do with these? Subset out?
#Change output file names to new upload date
### WD and Packages ----
setwd("~/Documents/GitHub/WIN File Creation")
library(tidyverse)
library(readxl)
library(dplyr)
library(readr)
library(lubridate)
library(purrr)
### Data Import ----
Mon_ID <- read_csv("Data/LW/Lakewatch Monitoring Location ID.csv", col_types = cols(
Preparation_Time = col_character(),
Analysis_Time = col_character(),
))
TP <- read_csv("Data/LW/TP_STACKED.csv", col_types = cols(
Preparation_Time = col_character(),
Analysis_Time = col_character(),
))
TP_NonMatch <- read_csv("Data/LW/TP_NonMatch.csv", col_types = cols(
Preparation_Time = col_character(),
Analysis_Time = col_character(),
))
TN <- read_csv("Data/LW/TN_STACKED.csv", col_types = cols(
Preparation_Time = col_character(),
Analysis_Time = col_character(),
))
TN_NonMatch <- read_csv("Data/LW/TN_NonMatch.csv", col_types = cols(
Preparation_Time = col_character(),
Analysis_Time = col_character(),
))
Color <- read_csv("Data/LW/Color_STACKED.csv", col_types = cols(
Preparation_Time = col_character(),
Analysis_Time = col_character(),
))
Color_NonMatch <- read_csv("Data/LW/Color_NonMatch.csv", col_types = cols(
Preparation_Time = col_character(),
Analysis_Time = col_character(),
))
Cond <- read_csv("Data/LW/Cond_STACKED.csv", col_types = cols(
Preparation_Time = col_character(),
Analysis_Time = col_character(),
))
Cond_NonMatch <- read_csv("Data/LW/Cond_NonMatch.csv", col_types = cols(
Preparation_Time = col_character(),
Analysis_Time = col_character(),
))
CHL <- read_csv("Data/LW/CHL_STACKED.csv", col_types = cols(
Preparation_Time = col_character(),
Analysis_Time = col_character(),
Station = col_character()
))
Secchi <- read_csv("Data/LW/Secchi_STACKED.csv", col_types = cols(
Preparation_Time = col_character(),
Analysis_Time = col_character(),
Activity_Start_Time = col_character(),
))
### Functions ----
## FOR ALL PARAMETERS ##
## Define lakes and counties for CBA
cba_lake_names <- c("Allen", "Alligator", "Bass Lake", "Big Red Fish", "Camp Creek", "Campbell",
"Deer", "Draper", "Eastern", "Eastern North", "Fuller", "Grayton",
"Little Red Fish", "Morris", "Mullet Creek-1", "Mullet Creek-2",
"Mullet Creek-3", "Oyster", "Powell", "Roberts", "Stallworth",
"Swift Creek-1", "Swift Creek-2", "Swift Creek-3", "Swift Creek-4",
"Tresca", "Western", "Western Northeast")
cba_county_names <- c("Walton", "Okaloosa", "Washington", "Holmes")
# Function to update Sampling_Agency_Name
change_sampling_names <- function(Lake, County) {
if (str_detect(Lake, regex("CBA", ignore_case = TRUE))) {
return("CHOCTAWHATCHEE BASIN ALLIANCE")
} else if (Lake %in% cba_lake_names & County %in% cba_county_names) {
return("CHOCTAWHATCHEE BASIN ALLIANCE")
} else if (County == "Bay") {
return("ST. ANDREW BAY RESOURCE MANAGEMENT ASSOCIATION INC.")
} else {
return("Florida Lakewatch")
}
}
# Apply function to update Sampling_Agency_Name in the dataset
# df <- df %>%
#   mutate(Sampling_Agency_Name = mapply(change_sampling_names, Lake, County))
# For changing the Project ID
change_project_id<- function(Project_ID, Sampling_Agency_Name) {
Sampling_Agency_Name <- ifelse(grepl("CHOCTAWHATCHEE BASIN ALLIANCE", Sampling_Agency_Name, ignore.case = FALSE),
"BAYRALLY",
"21FLKWAT")
return(Sampling_Agency_Name)
}
## FOR SECCHI ONLY ##
#For blank org result value, org result value should = "Not Reported".
not_reported_secchi <- function(Org_Result_Value){
ifelse(is.na(Org_Result_Value), "Not Reported", Org_Result_Value)
}
#change Total_Depth to = Org_Result_Value If Value_Qualifier = S
change_total_depth <- function(Total_Depth, Value_Qualifier, Org_Result_Value){
ifelse(Value_Qualifier == "S", Org_Result_Value, Total_Depth)
}
### RECYCLE NON_MATCHES ----
#Join each non match file with Secchi for start time and concat it with its parameter file for this round -
#make sure to remove these lines from the non match and resave non match file as new
### SECCHI ----
#change format of dates
v2<- c(Secchi$Activity_Start_Date)
x2 <- lubridate::parse_date_time(v2,'"%m%d%y"')
format(x2, format = '%m/%d/%Y')
Secchi_d <- Secchi%>%
mutate('Activity_Start_Date'=format(x2, format = '%m/%d/%Y')) %>%
mutate(Org_Analyte_Name = "Depth, Secchi Disk Depth")%>%
mutate('Org_Result_Value' = not_reported_secchi(Org_Result_Value))%>%
mutate(Station = as.character(Station)) %>%
mutate(Lake_County_Sta = paste(Lake, County, Station)) %>%
mutate(Org_Result_Value = not_reported_secchi(Org_Result_Value)) %>%
mutate(Total_Depth = change_total_depth(Total_Depth,Value_Qualifier, Org_Result_Value)) %>%
mutate(Sampling_Agency_Name = mapply(change_sampling_names, Lake, County)) %>%
mutate(Project_ID = change_project_id(Project_ID, Sampling_Agency_Name))
#JOIN WITH BASE FILE FOR MONITORING LOCATION ID
Mon_ID = Mon_ID %>%
mutate(Station = as.character(Station)) %>%
mutate(Lake_County_Sta = paste(Lake, County, Station))
Secchi_t  <- Secchi_d %>%
inner_join(Mon_ID, by = c("Lake_County_Sta")) %>%
select(-c("Lake.y", "County.y", "Station.y")) %>%
rename("Lake" = "Lake.x", "County" = "County.x", "Station" = "Station.x")
#ADD COLUMNS
Secchi_WIN <- Secchi_t
Secchi_WIN$Project_ID = paste0(Secchi_t$"Project_ID")
Secchi_WIN$Sampling_Agency_Name = paste0(Secchi_t$"Sampling_Agency_Name")
Secchi_WIN$Matrix <- "AQUEOUS-Surface Water"
Secchi_WIN$Monitoring_Location_ID = paste0(Secchi_t$"Lake_County_Sta")
Secchi_WIN$Activity_ID = paste0(Secchi_WIN$Monitoring_Location_ID,"-",Secchi_t$Activity_Start_Date,"F")
Secchi_WIN$Activity_Date_Time = paste0(Secchi_t$Activity_Start_Date," ",Secchi_t$Activity_Start_Time)
Secchi_WIN$Preparation_Date_Time = paste0(" ")
Secchi_WIN$Analysis_Date_Time = paste0(" ")
Secchi_WIN$Lab_ID = paste("21FLKWAT")
Secchi_WIN$Lab_Accreditation_Authority = paste("None")
Secchi_WIN$Lab_Sample_ID = paste0(Secchi_WIN$Activity_ID)
#Reorder columns
Secchi_Print <- Secchi_WIN[,c("Project_ID","Sampling_Agency_Name","Matrix",
"Monitoring_Location_ID","Activity_ID","ADAPT_Analyte_ID","Org_Analyte_Name",
"Activity_Type","Sample_Collection_Type","Sample_Collection_Equipment",
"Activity_Depth","Activity_Depth_Unit","Total_Depth",
"Total_Depth_Unit","Analysis_Method","Sample_Fraction",
"Preparation_Date_Time","Preparation_Time_Zone","Analysis_Date_Time",
"Analysis_Time_Zone","Activity_Date_Time","Activity_Time_Zone",
"Org_Result_Value","Org_Result_Unit","Org_MDL",
"Org_PQL","Org_Detection_Unit","Value_Qualifier",
"Result_Comments","Result_Value_Type_Name","Dilution",
"Lab_ID","Lab_Accreditation_Authority","Lab_Sample_ID")]
#Subset Secchi for join with other parameters
Secchi_Join <- Secchi_t[,c("County", "Lake", "Activity_Start_Date", "Activity_Start_Time", "Station", "Activity_Time_Zone", "Monitoring_Location_ID")]
### Change date to avoid overwriting older files
CBA_Secchi <- Secchi_Print %>% filter(Sampling_Agency_Name == "CHOCTAWHATCHEE BASIN ALLIANCE")
write.table(CBA_Secchi, file = "Output/CBA_Secchi_Dec2024.txt", sep = "|", na = "", row.names = FALSE, quote = FALSE)
LW_Secchi <- Secchi_Print %>% filter(Sampling_Agency_Name == "Florida Lakewatch")
write.table(LW_Secchi, file = "Output/LW_Secchi_Dec2024.txt", sep = "|", na = "", row.names = FALSE, quote = FALSE)
### TP ----
#bind rows from TP and TP_NonMatch
TP <- rbind(TP, TP_NonMatch)
#change format of dates
v5<- c(TP$Activity_Start_Date)
x5 <- lubridate::parse_date_time(v5,'"%m%d%y"')
format(x5, format = '%m/%d/%Y')
v105<- c(TP$Preparation_Date)
x105 <- lubridate::parse_date_time(v105,'"%m%d%y"')
format(x105, format = '%m/%d/%Y')
v106<- c(TP$Analysis_Date)
x106 <- lubridate::parse_date_time(v106,'"%m%d%y"')
format(x106, format = '%m/%d/%Y')
TP_t = TP%>%
mutate('Activity_Start_Date'=format(x5, format = '%m/%d/%Y')) %>%
mutate('Preparation_Date'=format(x105, format = '%m/%d/%Y')) %>%
mutate('Analysis_Date'=format(x106, format = '%m/%d/%Y')) %>%
mutate('WIN_Value_Qualifier' = ifelse(WIN_Value_Qualifier %in% c("T", "TI"), "U",
ifelse(WIN_Value_Qualifier == "QTI", "QU", WIN_Value_Qualifier)))%>%
mutate('Result_Value(ug/L)' = ifelse('Result_Value(ug/L)' <6, 6, 'Result_Value(ug/L)')) %>%
mutate(Sampling_Agency_Name = mapply(change_sampling_names, Lake, County))%>%
mutate(Project_ID = change_project_id(Project_ID, Sampling_Agency_Name))
# Project Notes ----
#For sampling agency names:
#which lakes are actually St. Andrews, or is it just all Bay county like XT did it?
#Sampling Agency Names : ST. ANDREW BAY RESOURCE MANAGEMENT ASSOCIATION INC. or Florida Lakewatch (Project ID: 21FLKWAT) or
#CHOCTAWHATCHEE BASIN ALLIANCE (Project ID: BAYRALLY)
#Non-matches and recycling:
#Subset these non matches and add them to a non match folder like always? Yes, for each upload, keep a running file for all non matches
#and code in a concat with non match before joining wiht secchi?
#Also add by joining this secchi with old non matches for each run through this code
#Since chls SHOULD be running about the same time as other parameters, just ignore non-matches? juice worth the squeeze??
#Before running this code,
#Copy the new version of files to Data folder using Data Import names
#Adjust column names to work with code
#rows without activity times from secchi and rows without filtering times from CHL files (both cor and un) will not go into WIN...
#What to do with these? Subset out?
#Change output file names to new upload date
### WD and Packages ----
setwd("~/Documents/GitHub/WIN File Creation")
library(tidyverse)
library(readxl)
library(dplyr)
library(readr)
library(lubridate)
library(purrr)
### Data Import ----
Mon_ID <- read_csv("Data/LW/Lakewatch Monitoring Location ID.csv", col_types = cols(
Preparation_Time = col_character(),
Analysis_Time = col_character(),
))
TP <- read_csv("Data/LW/TP_STACKED.csv", col_types = cols(
Preparation_Time = col_character(),
Analysis_Time = col_character(),
))
TP_NonMatch <- read_csv("Data/LW/TP_NonMatch.csv", col_types = cols(
Preparation_Time = col_character(),
Analysis_Time = col_character(),
))
TN <- read_csv("Data/LW/TN_STACKED.csv", col_types = cols(
Preparation_Time = col_character(),
Analysis_Time = col_character(),
))
TN_NonMatch <- read_csv("Data/LW/TN_NonMatch.csv", col_types = cols(
Preparation_Time = col_character(),
Analysis_Time = col_character(),
))
Color <- read_csv("Data/LW/Color_STACKED.csv", col_types = cols(
Preparation_Time = col_character(),
Analysis_Time = col_character(),
))
Color_NonMatch <- read_csv("Data/LW/Color_NonMatch.csv", col_types = cols(
Preparation_Time = col_character(),
Analysis_Time = col_character(),
))
Cond <- read_csv("Data/LW/Cond_STACKED.csv", col_types = cols(
Preparation_Time = col_character(),
Analysis_Time = col_character(),
))
Cond_NonMatch <- read_csv("Data/LW/Cond_NonMatch.csv", col_types = cols(
Preparation_Time = col_character(),
Analysis_Time = col_character(),
))
CHL <- read_csv("Data/LW/CHL_STACKED.csv", col_types = cols(
Preparation_Time = col_character(),
Analysis_Time = col_character(),
Station = col_character()
))
Secchi <- read_csv("Data/LW/Secchi_STACKED.csv", col_types = cols(
Preparation_Time = col_character(),
Analysis_Time = col_character(),
Activity_Start_Time = col_character(),
))
### Functions ----
## FOR ALL PARAMETERS ##
## Define lakes and counties for CBA
cba_lake_names <- c("Allen", "Alligator", "Bass Lake", "Big Red Fish", "Camp Creek", "Campbell",
"Deer", "Draper", "Eastern", "Eastern North", "Fuller", "Grayton",
"Little Red Fish", "Morris", "Mullet Creek-1", "Mullet Creek-2",
"Mullet Creek-3", "Oyster", "Powell", "Roberts", "Stallworth",
"Swift Creek-1", "Swift Creek-2", "Swift Creek-3", "Swift Creek-4",
"Tresca", "Western", "Western Northeast")
cba_county_names <- c("Walton", "Okaloosa", "Washington", "Holmes")
# Function to update Sampling_Agency_Name
change_sampling_names <- function(Lake, County) {
if (str_detect(Lake, regex("CBA", ignore_case = TRUE))) {
return("CHOCTAWHATCHEE BASIN ALLIANCE")
} else if (Lake %in% cba_lake_names & County %in% cba_county_names) {
return("CHOCTAWHATCHEE BASIN ALLIANCE")
} else if (County == "Bay") {
return("ST. ANDREW BAY RESOURCE MANAGEMENT ASSOCIATION INC.")
} else {
return("Florida Lakewatch")
}
}
# Apply function to update Sampling_Agency_Name in the dataset
# df <- df %>%
#   mutate(Sampling_Agency_Name = mapply(change_sampling_names, Lake, County))
# For changing the Project ID
change_project_id<- function(Project_ID, Sampling_Agency_Name) {
Sampling_Agency_Name <- ifelse(grepl("CHOCTAWHATCHEE BASIN ALLIANCE", Sampling_Agency_Name, ignore.case = FALSE),
"BAYRALLY",
"21FLKWAT")
return(Sampling_Agency_Name)
}
## FOR SECCHI ONLY ##
#For blank org result value, org result value should = "Not Reported".
not_reported_secchi <- function(Org_Result_Value){
ifelse(is.na(Org_Result_Value), "Not Reported", Org_Result_Value)
}
#change Total_Depth to = Org_Result_Value If Value_Qualifier = S
change_total_depth <- function(Total_Depth, Value_Qualifier, Org_Result_Value){
ifelse(Value_Qualifier == "S", Org_Result_Value, Total_Depth)
}
### RECYCLE NON_MATCHES ----
#Join each non match file with Secchi for start time and concat it with its parameter file for this round -
#make sure to remove these lines from the non match and resave non match file as new
### SECCHI ----
#change format of dates
v2<- c(Secchi$Activity_Start_Date)
x2 <- lubridate::parse_date_time(v2,'"%m%d%y"')
format(x2, format = '%m/%d/%Y')
Secchi_d <- Secchi%>%
mutate('Activity_Start_Date'=format(x2, format = '%m/%d/%Y')) %>%
mutate(Org_Analyte_Name = "Depth, Secchi Disk Depth")%>%
mutate('Org_Result_Value' = not_reported_secchi(Org_Result_Value))%>%
mutate(Station = as.character(Station)) %>%
mutate(Lake_County_Sta = paste(Lake, County, Station)) %>%
mutate(Org_Result_Value = not_reported_secchi(Org_Result_Value)) %>%
mutate(Total_Depth = change_total_depth(Total_Depth,Value_Qualifier, Org_Result_Value)) %>%
mutate(Sampling_Agency_Name = mapply(change_sampling_names, Lake, County)) %>%
mutate(Project_ID = change_project_id(Project_ID, Sampling_Agency_Name))
#JOIN WITH BASE FILE FOR MONITORING LOCATION ID
Mon_ID = Mon_ID %>%
mutate(Station = as.character(Station)) %>%
mutate(Lake_County_Sta = paste(Lake, County, Station))
Secchi_t  <- Secchi_d %>%
inner_join(Mon_ID, by = c("Lake_County_Sta")) %>%
select(-c("Lake.y", "County.y", "Station.y")) %>%
rename("Lake" = "Lake.x", "County" = "County.x", "Station" = "Station.x")
#ADD COLUMNS
Secchi_WIN <- Secchi_t
Secchi_WIN$Project_ID = paste0(Secchi_t$"Project_ID")
Secchi_WIN$Sampling_Agency_Name = paste0(Secchi_t$"Sampling_Agency_Name")
Secchi_WIN$Matrix <- "AQUEOUS-Surface Water"
Secchi_WIN$Monitoring_Location_ID = paste0(Secchi_t$"Lake_County_Sta")
Secchi_WIN$Activity_ID = paste0(Secchi_WIN$Monitoring_Location_ID,"-",Secchi_t$Activity_Start_Date,"F")
Secchi_WIN$Activity_Date_Time = paste0(Secchi_t$Activity_Start_Date," ",Secchi_t$Activity_Start_Time)
Secchi_WIN$Preparation_Date_Time = paste0(" ")
Secchi_WIN$Analysis_Date_Time = paste0(" ")
Secchi_WIN$Lab_ID = paste("21FLKWAT")
Secchi_WIN$Lab_Accreditation_Authority = paste("None")
Secchi_WIN$Lab_Sample_ID = paste0(Secchi_WIN$Activity_ID)
#Reorder columns
Secchi_Print <- Secchi_WIN[,c("Project_ID","Sampling_Agency_Name","Matrix",
"Monitoring_Location_ID","Activity_ID","ADAPT_Analyte_ID","Org_Analyte_Name",
"Activity_Type","Sample_Collection_Type","Sample_Collection_Equipment",
"Activity_Depth","Activity_Depth_Unit","Total_Depth",
"Total_Depth_Unit","Analysis_Method","Sample_Fraction",
"Preparation_Date_Time","Preparation_Time_Zone","Analysis_Date_Time",
"Analysis_Time_Zone","Activity_Date_Time","Activity_Time_Zone",
"Org_Result_Value","Org_Result_Unit","Org_MDL",
"Org_PQL","Org_Detection_Unit","Value_Qualifier",
"Result_Comments","Result_Value_Type_Name","Dilution",
"Lab_ID","Lab_Accreditation_Authority","Lab_Sample_ID")]
#Subset Secchi for join with other parameters
Secchi_Join <- Secchi_t[,c("County", "Lake", "Activity_Start_Date", "Activity_Start_Time", "Station", "Activity_Time_Zone", "Monitoring_Location_ID")]
### Change date to avoid overwriting older files
CBA_Secchi <- Secchi_Print %>% filter(Sampling_Agency_Name == "CHOCTAWHATCHEE BASIN ALLIANCE")
write.table(CBA_Secchi, file = "Output/CBA_Secchi_Dec2024.txt", sep = "|", na = "", row.names = FALSE, quote = FALSE)
LW_Secchi <- Secchi_Print %>% filter(Sampling_Agency_Name == "Florida Lakewatch")
write.table(LW_Secchi, file = "Output/LW_Secchi_Dec2024.txt", sep = "|", na = "", row.names = FALSE, quote = FALSE)
### TP ----
#bind rows from TP and TP_NonMatch
TP <- rbind(TP, TP_NonMatch)
#change format of dates
v5<- c(TP$Activity_Start_Date)
x5 <- lubridate::parse_date_time(v5,'"%m%d%y"')
format(x5, format = '%m/%d/%Y')
v105<- c(TP$Preparation_Date)
x105 <- lubridate::parse_date_time(v105,'"%m%d%y"')
format(x105, format = '%m/%d/%Y')
v106<- c(TP$Analysis_Date)
x106 <- lubridate::parse_date_time(v106,'"%m%d%y"')
format(x106, format = '%m/%d/%Y')
TP_t = TP%>%
mutate('Activity_Start_Date'=format(x5, format = '%m/%d/%Y')) %>%
mutate('Preparation_Date'=format(x105, format = '%m/%d/%Y')) %>%
mutate('Analysis_Date'=format(x106, format = '%m/%d/%Y')) %>%
mutate('WIN_Value_Qualifier' = ifelse(WIN_Value_Qualifier %in% c("T", "TI"), "U",
ifelse(WIN_Value_Qualifier == "QTI", "QU", WIN_Value_Qualifier)))%>%
mutate('Result_Value(ug/L)' = ifelse('Result_Value(ug/L)' <6, 6, 'Result_Value(ug/L)')) %>%
mutate(Sampling_Agency_Name = mapply(change_sampling_names, Lake, County))%>%
mutate(Project_ID = change_project_id(Project_ID, Sampling_Agency_Name))
